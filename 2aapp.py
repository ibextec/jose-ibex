import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4

# Fun√ß√£o para gerar o plano 2D
def gerar_plano_2d(plano_corte, chapa_largura, chapa_altura):
    fig, ax = plt.subplots(figsize=(10, 7))
    ax.set_title("Plano de Corte")
    ax.set_xlim(0, chapa_largura)
    ax.set_ylim(0, chapa_altura)
    
    for _, x, y, w, h in plano_corte:
        cor = plt.cm.tab20(np.random.randint(20))
        ret = plt.Rectangle((x, y), w, h, edgecolor='black', facecolor=cor, alpha=0.6)
        ax.add_patch(ret)
        ax.text(x + w/2, y + h/2, f"{w}x{h}", ha='center', va='center', fontsize=8)
    
    plt.gca().invert_yaxis()
    return fig

# Fun√ß√£o para gerar o relat√≥rio de fitas e cortes
def gerar_relatorio_fitas_e_cortes(plano_corte, espessura_chapa):
    total_metros = 0
    for _, x, y, w, h in plano_corte:
        perimetro = 2 * (w + h)
        total_metros += perimetro / 1000  # Convertendo para metros
    return f"Espessura da chapa: {espessura_chapa}mm\nMetragem linear total de corte: {total_metros:.2f}m\nCusto estimado: R${total_metros * 2.5:.2f} (considerando R$2,50/m)"

# Fun√ß√£o para gerar o relat√≥rio de aproveitamento
def gerar_relatorio_aproveitamento(plano_corte, chapa_largura, chapa_altura, num_chapas):
    area_total = chapa_largura * chapa_altura * num_chapas
    area_utilizada = sum(w * h for _, _, _, w, h in plano_corte)
    aproveitamento = (area_utilizada / area_total) * 100
    return f"Aproveitamento: {aproveitamento:.2f}%"

# Fun√ß√£o para gerar o relat√≥rio de etiquetas de identifica√ß√£o
def gerar_relatorio_etiquetas(plano_corte):
    etiquetas = []
    for idx, (_, x, y, w, h) in enumerate(plano_corte, 1):
        etiquetas.append(
            f"Pe√ßa {idx}\n"
            f"Posi√ß√£o: ({x+1}mm, {y+1}mm)\n"
            f"Dimens√µes: {w}x{h}mm"
        )
    return "\n".join(etiquetas)

# Fun√ß√£o para gerar o relat√≥rio em PDF
def gerar_relatorio_pdf(plano_corte, espessura_chapa, chapa_largura, chapa_altura, num_chapas):
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=A4)
    
    pdf.setTitle("Relat√≥rio de Corte")
    pdf.setFont("Helvetica-Bold", 16)
    pdf.drawString(50, 750, "Relat√≥rio de Corte")
    
    pdf.setFont("Helvetica", 12)
    pdf.drawString(50, 730, f"Espessura da chapa: {espessura_chapa}mm")
    pdf.drawString(50, 710, f"Total de chapas: {num_chapas}")
    pdf.drawString(50, 690, f"Largura da chapa: {chapa_largura}mm")
    pdf.drawString(50, 670, f"Altura da chapa: {chapa_altura}mm")
    
    pdf.showPage()
    pdf.save()
    
    buffer.seek(0)
    return buffer

# Fun√ß√£o para a p√°gina de corte
def pagina_corte():
    st.header("üìê Plano de Corte")
    st.write("Aqui voc√™ pode configurar as dimens√µes da chapa e as pe√ßas.")

    # Campos de entrada
    chapa_largura = st.number_input("Largura da Chapa (mm)", min_value=0, value=1000)
    chapa_altura = st.number_input("Altura da Chapa (mm)", min_value=0, value=500)
    espessura_chapa = st.number_input("Espessura da Chapa (mm)", min_value=0, value=1)
    maquina = st.selectbox("Selecione a M√°quina", ["Rauter", "Seccionadora"], index=0)
    
    # Tabela para entrada de pe√ßas (zerada inicialmente)
    st.subheader("Pe√ßas")
    pecas = st.data_editor(
        pd.DataFrame(columns=["Largura (mm)", "Altura (mm)", "Quantidade"]),
        num_rows="dynamic"
    )
    
    if st.button("Calcular"):
        pecas_list = []
        for _, row in pecas.iterrows():
            pecas_list.extend([(row["Largura (mm)"], row["Altura (mm)"], row["Quantidade"])])
        
        # Simula√ß√£o de corte (por simplicidade, vamos usar uma lista fixa)
        plano_corte = [
            (0, 0, 0, 100, 50),
            (0, 0, 100, 50, 1),
            (0, 50, 0, 100, 50),
            (0, 50, 100, 50, 1),
        ]
        
        # Gerar o plano 2D
        plano_fig = gerar_plano_2d(plano_corte, chapa_largura, chapa_altura)
        st.pyplot(plano_fig)
        
        # Gerar o relat√≥rio de fitas e cortes
        relatorio_fitas = gerar_relatorio_fitas_e_cortes(plano_corte, espessura_chapa)
        st.subheader("Relat√≥rio de Fitas e Cortes")
        st.write(relatorio_fitas)
        
        # Gerar o relat√≥rio de aproveitamento
        relatorio_aproveitamento = gerar_relatorio_aproveitamento(plano_corte, chapa_largura, chapa_altura, len(plano_corte))
        st.subheader("Relat√≥rio de Aproveitamento")
        st.write(relatorio_aproveitamento)
        
        # Gerar o relat√≥rio de etiquetas de identifica√ß√£o
        relatorio_etiquetas = gerar_relatorio_etiquetas(plano_corte)
        st.subheader("Etiquetas de Identifica√ß√£o")
        st.text_area("", relatorio_etiquetas, height=200)
        
        # Gerar o relat√≥rio em PDF
        pdf_buffer = gerar_relatorio_pdf(plano_corte, espessura_chapa, chapa_largura, chapa_altura, len(plano_corte))
        st.download_button(
            label="Baixar Relat√≥rio PDF",
            data=pdf_buffer,
            file_name="relatorio_corte.pdf",
            mime="application/pdf"
        )

# Fun√ß√£o para a p√°gina de relat√≥rios
def pagina_relatorios():
    st.header("üìä Relat√≥rios")
    st.write("Aqui voc√™ pode ver os relat√≥rios gerados.")

# Fun√ß√£o para a p√°gina de configura√ß√µes
def pagina_configuracoes():
    st.header("‚öôÔ∏è Configura√ß√µes")
    st.write("Aqui voc√™ pode configurar as op√ß√µes gerais.")

# Fun√ß√£o principal
def main():
    st.set_page_config(page_title="Otimizador de Corte", layout="wide")
    
    # Abas
    tab1, tab2, tab3 = st.tabs(["üìê Plano de Corte", "üìä Relat√≥rios", "‚öôÔ∏è Configura√ß√µes"])
    
    with tab1:
        pagina_corte()
    
    with tab2:
        pagina_relatorios()
    
    with tab3:
        pagina_configuracoes()

if __name__ == "__main__":
    main()
